#+TITLE:     Reference - Providers
#+AUTHOR:    Hugo Duncan
#+EMAIL:     hugo_duncan@yahoo.com
#+DATE:      2010-06-17 Thu
#+DESCRIPTION: Pallet reference documentation for providers
#+KEYWORDS: pallet providers cloud api
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP: index.html
#+LINK_HOME: ../index.html
#+property: exports code
#+property: results output
#+property: cache true
#+STYLE: <link rel="stylesheet" type="text/css" href="../doc.css" />

#+MACRO: clojure [[http://clojure.org][Clojure]]
#+MACRO: jclouds [[http://jclouds.org][jclouds]]

Pallet uses {{{jclouds}}} to create, start and stop nodes.  In order to use the cloud,
you will need to specify your cloud credentials.  Each cloud has a slightly
different terminology for the username/key and password/secret.

* Cloud Provider Names

In order to sign in to your cloud API, you will need to tell pallet the name of
your provider.  The names pallet recognises can be displayed with the following
from the REPL:

#+BEGIN_SRC clojure  :session s1
   (require 'pallet.compute)
   (pallet.compute/supported-providers)
#+END_SRC

From the command line, you can use the lein plugin to list providers:

#+BEGIN_SRC sh
   lein pallet providers
#+END_SRC

* Explicit credentials

You can log in to the cloud explicitly, using the provider name, and your
credentials.

#+BEGIN_SRC clojure
  (require 'pallet.compute)
  (def service
    (pallet.compute/compute-service
     "provider" :identity "username" :credential "password"))
#+END_SRC

Pallet uses {{{jclouds}}}' terminology, =identity= and =credential=, but your
cloud provider will probably use different terms for these.

* Credentials in config.clj

You can use the pallet configuration file [[file:~/.pallet/config.clj][~/.pallet/config.clj]] to specify
credentials.

#+BEGIN_SRC clojure
  (defpallet
    :providers
      {:aws {:provider "ec2" :identity "key" :credential "secret-key"}
       :rs  {:provider "cloudservers" :identity "username" :credential "key"}})
#+END_SRC

The provider key, =:aws= and =:rs= above, has to be unqiue, but you can have
multiple accounts for the same provider.

To create a compute service object from this file, that you can pass to =lift=
or =converge=, you use =pallet.compute/compute-service-from-config=. By default,
the first provider entry will be used, and you can specify an alternative
provider by passing the key to the function.

#+BEGIN_SRC clojure
  (pallet.compute/compute-service-from-config "rs")
#+END_SRC

The [[file:~/.pallet/config.clj][config.clj]] file is read automatically by the =lein= and =cake= plugins, and
in =lein=, you can switch between providers using the `-P` command line option.

#+BEGIN_SRC sh
  lein pallet -P rs nodes
#+END_SRC


* Credentials in settings.xml

The maven settings.xml file is often used to hold user specific configuration for
maven.  You can add your cloud provider information to this file, which is
normally located at [[file:~/.m2/settings.xml][~/.m2/settings.xml]].

#+BEGIN_SRC nxml
  <settings>
    <profiles>
      <profile>
        <id>terremark</id>
        <activation>
          <activeByDefault>true</activeByDefault>
        </activation>
        <properties>
          <jclouds.compute.provider>Your Cloud serivce name</jclouds.compute.provider>
          <jclouds.compute.identity>Your Cloud API username or key</jclouds.compute.identity>
          <jclouds.compute.credential>Your Cloud API secret or password</jclouds.compute.credential>
        </properties>
      </profile>
    </profiles>
  </settings>
#+END_SRC

To create a compute service object from settings.xml, you use
=pallet.compute/compute-service-from-settings=. The default is determined by the
active profile. You can specify a different profile by passing the profile's id
to the function.

#+BEGIN_SRC clojure  :session s1
  (require 'pallet.compute)
  (def service (pallet.compute/compute-service-from-settings "terremark"))
#+END_SRC


