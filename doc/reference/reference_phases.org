#+SETUPFILE: ../org-templates/level-1.org
#+TITLE:     Pallet - Phases
#+DESCRIPTION: Pallet Phases
#+KEYWORDS: pallet phase phases configuration crates

A phase specifies a sequence of crates to be executed.  A phase can be defined
as part of a [[file:node_types.org][server-spec]], or inline in a [[file:operations.org][=configure= or =lift= invocation]], using
the =phase= macro.

A phase is a function taking a single =request= argument, which it modifies and
returns.  The =request= argument is passed to crate functions, which also
return the =request.

* =phase= macro

The =phase= macro is a convenience for defining a phase.  In the following
example, the two server-spec definitions are equivalent. The =phase=
macro also adds some error checking of the request map.

#+BEGIN_SRC clojure  :session s1
  (require 'pallet.core)
  (require 'pallet.resource)
  (require 'pallet.resource.package)

  (pallet.core/server-spec
    :phases
      {:configure
         (pallet.resource/phase
           (pallet.resource.package/package "curl"))})

  (pallet.core/server-spec
    :phases
      {:configure
         (function [request]
           (->
             request
             (pallet.resource.package/package "curl")))})
#+END_SRC

* :bootstrap

The =:bootstrap= phase is applied whenever pallet starts a new node.

* :configure

The =:configue= phase is applied by default by both the =converge= and the
=lift= commands.

* Inline phase

The :phase keyword in =lift= and =converge= can be used to carry out ad-hoc
configuration or administration tasks. In this example we install =curl= on all
running =mytag= nodes.

#+BEGIN_SRC clojure  :session s1
  (require 'pallet.core)
  (require 'pallet.compute)
  (require 'pallet.resource)
  (require 'pallet.resource.package)

  (pallet.core/lift
    (pallet.core/group-spec "mytag")
    :phase (pallet.resource/phase (pallet.resource.package/package "curl"))
    :compute (pallet.compute/service))
#+END_SRC

